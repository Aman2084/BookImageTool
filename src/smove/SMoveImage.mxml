<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   horizontalScrollPolicy="off" verticalScrollPolicy="off"
		   backgroundAlpha="0.6" backgroundColor="0x000000"
		   width="100%" height="100%" 
		   doubleClickEnabled="true"
		   show="{setFocus()}" mouseOver="{setFocus()}"
		    doubleClick="onDoubleClick(event)"
		   click="onClick(event)" resize="onResize(event)" keyUp="onKey(event)">
	
	<fx:Script>
		<![CDATA[
			import com.aman.event.ZEvent;
			
			import mx.events.ResizeEvent;
			
			
			
			private static const Auto:String = "auto";
			private static const ImgSize:String = "imgSize";
			
			[Bindable]
			public var url:String = null;
			
			private var _bmd:BitmapData = null;
			
			private var _zoomType:String = "auto"
			private var _index:int;
			private var _rect_draw:Rectangle = new Rectangle();
			private var _isMove:Boolean = false;
			
			private function onClick($e:MouseEvent):void{
				if(_isMove){
					_isMove = false;
					return;
				}
				var w:Number = this.width / 5;
				var s:String = null;
				if(this.mouseX<w){
					s = ZEvent.Prev;
				}else if(this.mouseX>(w*4)){
					s = ZEvent.Next;
				}else{
					_zoomType = _zoomType==Auto ? ImgSize : Auto;
					onResize();
				}
				
				if(s){
					var evt:ZEvent = new ZEvent(s);
					this.dispatchEvent(evt);
				}
			}
			
			private function onBtn($e:MouseEvent):void{
				var s:String = ""
				var data:Object = null
				if(s){
					var evt:ZEvent = new ZEvent(s , data);
					this.dispatchEvent(evt);
				}
			}
			
			private function onResize($e:Event=null):void{
				_bmd = img.bitmapData;
				if(!_bmd){
					return;
				}
				var w:Number = this.width;
				var h:Number = this.height;
				var wb:Number = _bmd.width;
				var hb:Number = _bmd.height;
				
				if(_zoomType==Auto){
					if(w<wb || h<hb){ 			//需要时缩放
						var sw:Number = w / wb;
						var sh:Number = h / hb;
						var s:Number = Math.min(sw , sh);
						wb *= s;
						hb *= s;
					}
					img.width = wb;
					img.height = hb;
					img.x = (w-wb)/2;
					img.y = (h-hb)/2;
				}else if(_zoomType==ImgSize){
					img.width = wb;
					img.height = hb;
					img.x = img.y = 0;
					if(wb<w){
						img.x = (w-wb)/2;
					}
					if(hb<h){
						img.y = (h-hb)/2;
					}
					
					if(w<wb || h<hb){
						_rect_draw.left = w-wb;
						_rect_draw.top = h-hb;
					}else{
						_rect_draw.left = 0;
						_rect_draw.top = 0;
					}
				}
			}
			
			private function onDown($e:MouseEvent):void{
				if(_zoomType==Auto){
					return
				}
				if(_rect_draw.width==0 && _rect_draw.height==0){
					return
				}
				img.startDrag(false , _rect_draw);
				stage.addEventListener(MouseEvent.MOUSE_UP , onUp);
				stage.addEventListener(MouseEvent.MOUSE_MOVE , onMove);
			}
			
			private function onMove($e:MouseEvent):void{
				_isMove = true;
			}
			
			private function onUp($e:MouseEvent):void{
				img.stopDrag();
				var  s:Stage = $e.currentTarget as Stage;
				s.removeEventListener(MouseEvent.MOUSE_UP , onUp);
				s.removeEventListener(MouseEvent.MOUSE_MOVE , onMove);
			}
			
			private function onKey($e:KeyboardEvent):void{
				var s:String = null;
				switch($e.keyCode){
					case Keyboard.ESCAPE:
						s = ZEvent.Close;
						break;
					case Keyboard.LEFT:
						s = ZEvent.Prev;
						break
					case Keyboard.RIGHT:
						s = ZEvent.Next;
						break
				}
				if(s){
					var evt:ZEvent = new ZEvent(s);
					this.dispatchEvent(evt);
				}
			}
			
			private function onDoubleClick($e:MouseEvent):void{
				if(url){
					var f:File = new File(url)
					if(f.exists){
						f.openWithDefaultApplication()
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Image id="img"
			 source="{url}" scaleMode="stretch" smooth="true"
			 mouseDown="onDown(event)" complete="onResize(event)"/>
</mx:Canvas>
